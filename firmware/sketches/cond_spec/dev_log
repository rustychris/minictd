2017-08-27

Wire.begin() hangs when called from the MS5803 constructor.  Probably it happens out of
order and depends on something that's not enabled yet.  Better to call it from SeaDuck::setup().

Real time clock:

Arduino time library supports down to seconds, and can be layered on top of teensy 3 clock.
Will return time as unix standard seconds.

Should I read from the arduino API, directly from Teensy3Clock, or from whatever
lies beneath the surface of that? Not sure what the benefit would be of the 
Arduino API at this point.  Already have to reach under the covers to get sub-second
resolution.

SD Card next??
 - on freebird, did the SD code use the teensy-specific I2C library?  I don't think so.
   that was just for interleaving calls to the ADS1115 and MPU9150.
 - were there local modifications to any other parts of that code?
 - will try the 3rd party SdFat, which is what freebird used, and is supposed to be
   more up to date than the SD library.

Seems that SD card is reading okay.

Next steps:
 [Log to SD card]
 Log to console
   -- would like a common interface for logging to SD or console.
   -- console log should be human-readable, and parseable.
   -- have to support flexible datatypes.
   -- can/should the frequency calculation code be moved to the teensy side?

What should the API for logging data look like then?
 - could follow freebird, where a text block included a numpy dtype-like
   description of the data
 - for writing to SD,

The various types of data:
 - thermistor: ('temp_rtd','<i4')
 - pressure:   ('temp_ms5803','<i4'), ('press_ms5803','<ms5803')
 - battery     ('battery','<i4')
 - conductivity, reduced ('cond','<i4')
 - conductivity, spectrum
     ('ref_mean','<i4',256/dac_out_stride)
     ('ref_var','<i4',256/dac_out_stride)
     ('cell_mean','<i4',256/dac_out_stride)
     ('cell_var','<i4',256/dac_out_stride)
     assuming we don't really need the dac data


 Each class then needs to support a method to write its data format string,
 and to write a binary representatino of that data to a stream.

 Extend conductivity to log spectra
 Use some spectra to evaluate best way to reduce to cond. value


One step higher level configuration:
 Need it to be programmable roughly like the freebird

 Freebird model:
  reads commands either from the console or a text file
  can set a sampling interval
  data can be written to the console or to SD
  the SD card has text blocks and data blocks.
  text block includes a numpy-like header describing the data format.
  Each time logging is started, a new file is created.
  All sampling is done on timers "in the background" while writing to
  SD and checking for console input is "in the foreground"

 Will this work for the minictd?
  For now, assume that something like 20 Hz is an upper bound on sampling.
  Assume that all parameters are sampled on the same timeline.
  Can enable or disable parameters from being logged.

  seems like this all works out okay.
  
SeaDuck should now be fully converted over to Sensor class.

Then on to timing of successive samples, writing binary to SD card, and
reading commands from SD card.

 - maybe this is a good time to have it run in the "background"?
 - freebird had all of the sensor stuff as chained interrupts in the background.
 - one significant motivation is that writing to SD has large and unpredictable
   delays.

What all has to happen during a sample?
 - pressure sensor: a pair of I2C send, delay, read, then some math
 - clock: basically reading a register
 - temperature: set some ADC parameters, analogRead(), and some math
 - conductivity: set some ADC, DAC, PDB registers, sine buffer,
     wait for the counts to get up high enough,
     maybe reduce the results.
 - write all of those out.

 With all of the stuff in conductivity, and the pain of settings up
 asynchronous calls on all of these, why not put the SD card in the background,
 and run the sampling in the foreground?

 Look back at freebird for any hints of why this wasn't the route taken.

 BUG: cannot call sample twice in a row?
  - sample then scan also hangs
  - multiple scan calls are okay.
  - so sample leaves somebody in a state that causes a subsequent scan to fail.
  - it's the thermistor.
  - It was the averaging.  Averaging screws up the cond. stuff.  Now force that to no averaging.

 FIXED.

 Sample_loop takes 131ms.  Needs to be more like 50ms.
 Doesn't appear to depend on the number of cond. loops?
 
 At 20kHz, that's 50us per cycle.  10 cycles 500us.

 Moving the Serial.available() out of the timing makes no difference.
 Not writing the output?  131 => 124ms

  sensor 0: 22ms  - pressure
  sensor 1: 101ms - conductivity.  wahn wah
  sensor 2: 0ms - ntc
  sensor 3: 0ms - rtc

Ah - there was a 100ms delay loop in conductivity.
Dropping that to 5ms, total loop time (no output) is 43ms.

That's 20 loops at 10kHz.
DAC oversample is 8.
So I think that's actually 20*8 cycles, so 16ms.
Yep - 21ms outside pressure sensor, 16ms min. time,
plus 5ms slop

(pressure abs mbar reading 2220)

Easy to get this down to 30ms with n_loops=10, so 30 Hz sampling
is well within reach and well beyond initial applications.

Plotting temp time series - seems like it may have some stability
problems, not sure.  NTC has nice response, but maybe is topping
out at 27.6?


How to log to SD?
 - easiest is to just log hex to SD, at a 2x performance loss.
 - maybe better is to have a global flag for sensors that can be set
   to binary or hex
 - if writing binary, how can it be made parseable?  we can make sure
   that only full frames are written out, but there has to be a way to
   mark that there is or isn't another frame.  or does there?  for
   console output that's a potential issue, but for writing to SD
   it should just be frames of the same format all the way to the end.
   though it would be nice to be able to intersperse another frame.
   Rather than getting too deep into how to do this, maybe better to
   default to HEX output for now, and only worry about doing something
   fancy with binary if bandwidth or storage space becomes an issue.


So the real fun part is the SD buffer handling.  Assume there is no a priori
reason why SD can't be handled asynchronously, and sampling is synchronous.

What parts of Storage.cpp have to changed to get asynchronous?  First, what is
the API for this?

 seems like SdFile myFile.write()
 is a key async target.  unfortunately it's buried in loop()
 .sync() also likely needs it

This turns out to be quite an issue.  The SdFat guy (Bill Greiman) has
made it clear that there will not be an SdFat which happily does its
work asynchronously.

This leaves two options:
 a) some form of threading, whether RTOS or a simpler layer
   TeensyThreading:
     this sounds promising.  they do note that since libraries are
     not generally thread-safe, each library should either be limited
     to a specific thread, or access to that library guarded by locks.

     The sampling code uses...
       ADC: should be no problem
       DMA  ?
       I2C (i2c_t3) for ms5803.
       rtclock
     SdFat uses ...
       SPI - seems to be about all.
 ideally there would be a way to have threading where the sampling
 thread is cooperative multitasking, and the SD thread is preemptive threading.
 that doesn't seem easy.
       
 b) rewrite the sampling code to be asynchronous, just like freebird.
    probably have to use my patched Wire library, or see if PJRC
    has something nicer.
    freebird code was more hardcoded in how the events cascaded.
    to be more flexible, would want a mechanism for each sensor or
    task to register the sequence of functions to call.  then
    in each of those functions, it just needs to be able to find
    out the function pointer for the next function.

 This seems the most promising.  i2c_t3 has support for async usage.

 Say the order is pressure, cond, ntc, clock, battery.

 pressure: have to make the ms5803 library async, a bit of a pain.
   sendCommand(CMD_ADC_CONV), waits up to 11ms
   sendCommand(CMD_ADC_READ), reads maybe 3 bytes

 the way to use threads of some flavor I guess would be that rather than
 breaking the code up into 20 bite-sized chunks, splitting single functions
 into awkward pieces, the functions would run in a thread, and on calling
 yield() control would jump back to the ISR.  the next time the ISR gets
 called, it jumps back into the thread.

 so the SD code doesn't really run in a thread, it's just doing it's thing.
 the trick is that the sampling code is all run in a thread, and that it's
 possible to call into that thread from an ISR, and de-schedule that
 thread (yield()?) from within the thread.  but the teensythreads code
 explicitly states that context switches will abort when called inside
 an interrupt.

 Okay - no free lunches out there.
 But rather than hard-coding the order, let's have a stack of functions
 and objects

Next up is getting conductivity to work async.  Pursue a similar
approach, not linking everything up just yet, but get a direct
call to conductivity to work async

Seems to work.  Loop time is 247ms -- fine.
  - pressure has a 40ms delay right now, and ADC has a 200ms delay.

So far just setting the various read() functions to use the
async approach.  But better to have an async_read(), which does
the same thing as read() but rather than any delays, it
makes sure the next callback gets scheduled afterwards. Probably
best to have read() use async_read(), with a an extra action at
the end so it returns when done (i.e. a semaphore of some sort)

async temperature is working.
the busy mechanism is not robust - no guard against using it
when busy is already nonzero.  Well, added a simple print statement.

Loop time down to 50ms, not sure how much of that is output.

Packaging the async's together:
  oneshot_sample: This should push one busywait, plus an async read for each
    enabled sources, pop_fn_and_call(), and then wait.
  So Sensor.read() should probably do that, but for a single sensor.

That's working.

HERE: need an asynchronous sampling loop, such that the main thread of
control can tend to the SD card and check for abort on input.
